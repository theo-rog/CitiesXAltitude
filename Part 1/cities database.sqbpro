<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="cities database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2058"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="cities_altitude_cleaned" custom_title="0" dock_id="1" table="4,23:maincities_altitude_cleaned"/><dock_state state="000000ff00000000fd0000000100000002000002720000026ffc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002720000015e00ffffff000002720000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="cities1000" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="14" mode="0"/></sort><column_widths><column index="1" value="80"/><column index="2" value="219"/><column index="3" value="183"/><column index="4" value="300"/><column index="5" value="58"/><column index="6" value="70"/><column index="7" value="96"/><column index="8" value="94"/><column index="9" value="97"/><column index="10" value="37"/><column index="11" value="94"/><column index="12" value="96"/><column index="13" value="96"/><column index="14" value="96"/><column index="15" value="77"/><column index="16" value="67"/><column index="17" value="37"/><column index="18" value="86"/><column index="19" value="126"/></column_widths><filter_values><column index="2" value="hoi an"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="cities_altitude" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="147"/><column index="2" value="51"/><column index="3" value="56"/><column index="4" value="91"/><column index="5" value="36"/><column index="6" value="36"/><column index="7" value="181"/><column index="8" value="52"/><column index="9" value="77"/><column index="10" value="67"/><column index="11" value="58"/></column_widths><filter_values><column index="4" value="VN"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="cities_altitude_cleaned" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="153"/><column index="2" value="51"/><column index="3" value="56"/><column index="4" value="105"/><column index="5" value="36"/><column index="6" value="36"/><column index="7" value="236"/><column index="8" value="52"/><column index="9" value="77"/><column index="10" value="67"/><column index="11" value="58"/><column index="12" value="56"/><column index="13" value="86"/><column index="14" value="92"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="cities_check" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="115"/><column index="2" value="106"/><column index="3" value="84"/><column index="4" value="73"/><column index="5" value="65"/><column index="6" value="76"/><column index="7" value="97"/><column index="8" value="99"/></column_widths><filter_values><column index="0" value="springfield"/><column index="1" value="United"/><column index="7" value="21.2"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="cities_check_IDcounts" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="115"/><column index="2" value="119"/><column index="3" value="84"/><column index="4" value="73"/><column index="5" value="65"/><column index="6" value="76"/><column index="7" value="97"/><column index="8" value="99"/><column index="9" value="116"/><column index="10" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sampled_cities_check" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="0" mode="0"/></sort><column_widths><column index="1" value="70"/><column index="2" value="82"/><column index="3" value="56"/><column index="4" value="50"/><column index="5" value="97"/><column index="6" value="99"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="simple_maps" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="123"/><column index="2" value="51"/><column index="3" value="56"/><column index="4" value="119"/><column index="5" value="36"/><column index="6" value="36"/><column index="7" value="169"/><column index="8" value="52"/><column index="9" value="77"/><column index="10" value="67"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- 1, Investigating countries with multiple cities with the same name:

SELECT asciiname, country_code, population, count(*) as num_repeats FROM cities1000
GROUP BY asciiname, country_code
HAVING num_repeats &gt; 5
ORDER BY num_repeats DESC


-- 2. Table on known cities

CREATE TABLE sampled_cities_check AS

SELECT 
    simple_maps.city,
    simple_maps.country,
    simple_maps.population AS pop1,
    cities1000.population AS pop2,

    -- scale-invariant log population ratio
    exp(ABS(LOG(simple_maps.population *1.0 / cities1000.population*1.0))) AS pop_ratio,

    -- haversine distance
    ROUND(
        6371 * 2 * ASIN(
            SQRT(
                POWER(SIN(RADIANS(simple_maps.lat - cities1000.latitude) / 2), 2) +
                COS(RADIANS(simple_maps.lat)) * COS(RADIANS(cities1000.latitude)) *
                POWER(SIN(RADIANS(simple_maps.lng - cities1000.longitude) / 2), 2)
            )
        ), 2
    ) AS haversine_km

FROM simple_maps

JOIN cities1000 
    ON simple_maps.city = cities1000.asciiname
    AND simple_maps.iso2 = cities1000.country_code

-- limit to the hand-selected sample
WHERE (simple_maps.city, simple_maps.iso2) IN (
  ('New York', 'US'), ('Boulder', 'US'), ('Banff', 'CA'),
  ('Chicago', 'US'), ('Vancouver', 'CA'),
  ('Lima', 'PE'), ('Valparaíso', 'CL'), ('Bariloche', 'AR'),
  ('Medellín', 'CO'), ('Quito', 'EC'),
  ('London', 'GB'), ('Pisa', 'IT'), ('Inverness', 'GB'),
  ('Munich', 'DE'), ('Zagreb', 'HR'), ('Porto', 'PT'),
  ('Nairobi', 'KE'), ('Casablanca', 'MA'), ('Banjul', 'GM'),
  ('Lusaka', 'ZM'), ('Durban', 'ZA'),
  ('Tokyo', 'JP'), ('Chiang Mai', 'TH'), ('Leh', 'IN'),
  ('Hanoi', 'VN'), ('Tbilisi', 'GE'),
  ('Sydney', 'AU'), ('Dunedin', 'NZ'), ('Alice Springs', 'AU'),
  ('Wellington', 'NZ'), ('Cairns', 'AU'),
  ('Beirut', 'LB'), ('Amman', 'JO'), ('Muscat', 'OM'),
  ('Riyadh', 'SA'), ('Doha', 'QA'),

  -- Intentionally ambiguous/problematic entries
  ('Springfield', 'US'),
  ('Kingston', 'JM'),
  ('Victoria', 'CA'),
  ('San Jose', 'CR'),
  ('St. Louis', 'US'),
  ('Sao Luis', 'BR')
)

-- remove invalid rows
AND simple_maps.population &gt; 0 AND cities1000.population &gt; 0;





-- Dataset lengths:
-- cities_altitude: 18653

-- simple_maps : 48056
-- simple_maps (non 0): 47802
-- cities1000 : 154694
-- cities1000 (non 0) : 142329

SELECT COUNT(*) from cities1000 WHERE asciiname = &quot;Springfield&quot; and country_code = &quot;US&quot;



-- part 3, Creating tables with ID counts, for all potential matches

CREATE TABLE cities_check AS

SELECT 
    simple_maps.city,
    simple_maps.country,
    simple_maps.population AS simple_pop,
	simple_maps.id AS simple_ID,
	cities1000.geonameid as cities_ID,
    cities1000.population AS cities_pop,

    -- ALPR
    POWER(10,(ABS(LOG10(simple_maps.population *1.0 / cities1000.population*1.0)))) AS ALPR,

    -- Haversine formula
    ROUND(
        6371 * 2 * ASIN(
            SQRT(
                POWER(SIN(RADIANS(simple_maps.lat - cities1000.latitude) / 2), 2) +
                COS(RADIANS(simple_maps.lat)) * COS(RADIANS(cities1000.latitude)) *
                POWER(SIN(RADIANS(simple_maps.lng - cities1000.longitude) / 2), 2)
            )
        ), 2
    ) AS haversine_km


-- Merging simple_maps with cities1000, creating a table with every potential match
FROM simple_maps

JOIN cities1000 
    ON simple_maps.city = cities1000.asciiname
    AND simple_maps.iso2 = cities1000.country_code
	
AND simple_maps.population &gt; 0 AND cities1000.population &gt; 0;


-- Creating a new table with counts of IDs in cities_check
CREATE TABLE cities_check_IDcounts AS

SELECT
	cities_check.*,
	simple_count_id_table.simple_id_count AS simple_id_count,
	cities_count_id_table.cities_id_count AS cities_id_count
	
FROM cities_check

JOIN
	(SELECT cities_ID, count(*) AS cities_id_count
	FROM cities_check GROUP BY cities_ID) 
	AS cities_count_id_table
	
ON cities_check.cities_ID = cities_count_id_table.cities_ID

JOIN
	(SELECT simple_ID, count(*) AS simple_id_count
	FROM cities_check GROUP BY simple_ID) 
	AS simple_count_id_table
	
ON cities_check.simple_ID = simple_count_id_table.simple_ID;
	
select count(*) from cities_check 

-- length: 47145


-- Part 4, Joining two tables, to include altitude (final dataset):


CREATE TABLE cities_altitude AS 

SELECT simple_maps.* , cities1000.dem as altitude, cities1000.geonameid as geoID

FROM simple_maps

JOIN cities1000 ON 
simple_maps.city = cities1000.asciiname
AND simple_maps.iso2 = cities1000.country_code
WHERE simple_maps.population &gt; 0 AND cities1000.population &gt; 0


-- Haversine distance
AND 6371 * 2 * ASIN(
        SQRT(
            POWER(SIN(RADIANS(simple_maps.lat - cities1000.latitude) / 2), 2) +
            COS(RADIANS(simple_maps.lat)) * COS(RADIANS(cities1000.latitude)) *
            POWER(SIN(RADIANS(simple_maps.lng - cities1000.longitude) / 2), 2)
        )
    ) &lt; 30;

-- Part 5, verificaiton of part 4: 

CREATE TABLE altitude_cities_verification AS
SELECT 
    cities_altitude.*, 
    count_SM_id_table.id_countSM, 
    count_GN_id_table.id_count_GN
FROM cities_altitude

JOIN (
    SELECT id, COUNT(*) AS id_countSM
    FROM cities_altitude 
    GROUP BY id
) AS count_SM_id_table
ON cities_altitude.id = count_SM_id_table.id

JOIN (
    SELECT geoID, COUNT(*) AS id_count_GN
    FROM cities_altitude 
    GROUP BY geoID
) AS count_GN_id_table
ON cities_altitude.geoID = count_GN_id_table.geoID;

SELECT * FROM altitude_cities_verification
WHERE id_countSM &gt; 1 OR id_count_GN &gt;1

-- Part 6, Removing rows with duplicate Simple Maps or GeoNames IDs

CREATE TABLE cities_altitude_cleaned AS
SELECT *
FROM altitude_cities_verification
WHERE id_countSM = 1 AND id_count_GN = 1;</sql><current_tab id="0"/></tab_sql></sqlb_project>
